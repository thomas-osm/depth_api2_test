/**
 * <copyright>
Copyright (c) 2010-2012, Jens Kï¿½bler
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * </copyright>
 *
 * $Id$
 */
package net.sf.seesea.model.core.geo.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.seesea.model.core.geo.util.GeoAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GeoItemProviderAdapterFactory extends GeoAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GeoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.GeoPosition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeoPositionItemProvider geoPositionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.GeoPosition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeoPositionAdapter() {
		if (geoPositionItemProvider == null) {
			geoPositionItemProvider = new GeoPositionItemProvider(this);
		}

		return geoPositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.Coordinate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoordinateItemProvider coordinateItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.Coordinate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoordinateAdapter() {
		if (coordinateItemProvider == null) {
			coordinateItemProvider = new CoordinateItemProvider(this);
		}

		return coordinateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.Latitude} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LatitudeItemProvider latitudeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.Latitude}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLatitudeAdapter() {
		if (latitudeItemProvider == null) {
			latitudeItemProvider = new LatitudeItemProvider(this);
		}

		return latitudeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.Longitude} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongitudeItemProvider longitudeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.Longitude}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLongitudeAdapter() {
		if (longitudeItemProvider == null) {
			longitudeItemProvider = new LongitudeItemProvider(this);
		}

		return longitudeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.Route} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RouteItemProvider routeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.Route}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRouteAdapter() {
		if (routeItemProvider == null) {
			routeItemProvider = new RouteItemProvider(this);
		}

		return routeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.NamedArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedArtifactItemProvider namedArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.NamedArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedArtifactAdapter() {
		if (namedArtifactItemProvider == null) {
			namedArtifactItemProvider = new NamedArtifactItemProvider(this);
		}

		return namedArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.NamedPosition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedPositionItemProvider namedPositionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.NamedPosition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedPositionAdapter() {
		if (namedPositionItemProvider == null) {
			namedPositionItemProvider = new NamedPositionItemProvider(this);
		}

		return namedPositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.RoutingContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoutingContainerItemProvider routingContainerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.RoutingContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoutingContainerAdapter() {
		if (routingContainerItemProvider == null) {
			routingContainerItemProvider = new RoutingContainerItemProvider(this);
		}

		return routingContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.POIContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected POIContainerItemProvider poiContainerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.POIContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPOIContainerAdapter() {
		if (poiContainerItemProvider == null) {
			poiContainerItemProvider = new POIContainerItemProvider(this);
		}

		return poiContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.Navarea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavareaItemProvider navareaItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.Navarea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavareaAdapter() {
		if (navareaItemProvider == null) {
			navareaItemProvider = new NavareaItemProvider(this);
		}

		return navareaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.Depth} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DepthItemProvider depthItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.Depth}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDepthAdapter() {
		if (depthItemProvider == null) {
			depthItemProvider = new DepthItemProvider(this);
		}

		return depthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.GNSSMeasuredPosition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GNSSMeasuredPositionItemProvider gnssMeasuredPositionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.GNSSMeasuredPosition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGNSSMeasuredPositionAdapter() {
		if (gnssMeasuredPositionItemProvider == null) {
			gnssMeasuredPositionItemProvider = new GNSSMeasuredPositionItemProvider(this);
		}

		return gnssMeasuredPositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.AnchorPosition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnchorPositionItemProvider anchorPositionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.AnchorPosition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnchorPositionAdapter() {
		if (anchorPositionItemProvider == null) {
			anchorPositionItemProvider = new AnchorPositionItemProvider(this);
		}

		return anchorPositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.ChartContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChartContainerItemProvider chartContainerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.ChartContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChartContainerAdapter() {
		if (chartContainerItemProvider == null) {
			chartContainerItemProvider = new ChartContainerItemProvider(this);
		}

		return chartContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.NavigationCompound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationCompoundItemProvider navigationCompoundItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.NavigationCompound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationCompoundAdapter() {
		if (navigationCompoundItemProvider == null) {
			navigationCompoundItemProvider = new NavigationCompoundItemProvider(this);
		}

		return navigationCompoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.Chart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChartItemProvider chartItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.Chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChartAdapter() {
		if (chartItemProvider == null) {
			chartItemProvider = new ChartItemProvider(this);
		}

		return chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.GeoPosition3D} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeoPosition3DItemProvider geoPosition3DItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.GeoPosition3D}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeoPosition3DAdapter() {
		if (geoPosition3DItemProvider == null) {
			geoPosition3DItemProvider = new GeoPosition3DItemProvider(this);
		}

		return geoPosition3DItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.MeasuredPosition3D} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasuredPosition3DItemProvider measuredPosition3DItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.MeasuredPosition3D}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasuredPosition3DAdapter() {
		if (measuredPosition3DItemProvider == null) {
			measuredPosition3DItemProvider = new MeasuredPosition3DItemProvider(this);
		}

		return measuredPosition3DItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.TracksContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TracksContainerItemProvider tracksContainerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.TracksContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTracksContainerAdapter() {
		if (tracksContainerItemProvider == null) {
			tracksContainerItemProvider = new TracksContainerItemProvider(this);
		}

		return tracksContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.Track} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrackItemProvider trackItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.Track}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrackAdapter() {
		if (trackItemProvider == null) {
			trackItemProvider = new TrackItemProvider(this);
		}

		return trackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.ChartSymbol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChartSymbolItemProvider chartSymbolItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.ChartSymbol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChartSymbolAdapter() {
		if (chartSymbolItemProvider == null) {
			chartSymbolItemProvider = new ChartSymbolItemProvider(this);
		}

		return chartSymbolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.ChartArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChartAreaItemProvider chartAreaItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.ChartArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChartAreaAdapter() {
		if (chartAreaItemProvider == null) {
			chartAreaItemProvider = new ChartAreaItemProvider(this);
		}

		return chartAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.seesea.model.core.geo.ChartWay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChartWayItemProvider chartWayItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.seesea.model.core.geo.ChartWay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChartWayAdapter() {
		if (chartWayItemProvider == null) {
			chartWayItemProvider = new ChartWayItemProvider(this);
		}

		return chartWayItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (geoPositionItemProvider != null) geoPositionItemProvider.dispose();
		if (coordinateItemProvider != null) coordinateItemProvider.dispose();
		if (latitudeItemProvider != null) latitudeItemProvider.dispose();
		if (longitudeItemProvider != null) longitudeItemProvider.dispose();
		if (routeItemProvider != null) routeItemProvider.dispose();
		if (namedArtifactItemProvider != null) namedArtifactItemProvider.dispose();
		if (namedPositionItemProvider != null) namedPositionItemProvider.dispose();
		if (routingContainerItemProvider != null) routingContainerItemProvider.dispose();
		if (poiContainerItemProvider != null) poiContainerItemProvider.dispose();
		if (chartContainerItemProvider != null) chartContainerItemProvider.dispose();
		if (navigationCompoundItemProvider != null) navigationCompoundItemProvider.dispose();
		if (chartItemProvider != null) chartItemProvider.dispose();
		if (geoPosition3DItemProvider != null) geoPosition3DItemProvider.dispose();
		if (measuredPosition3DItemProvider != null) measuredPosition3DItemProvider.dispose();
		if (tracksContainerItemProvider != null) tracksContainerItemProvider.dispose();
		if (trackItemProvider != null) trackItemProvider.dispose();
		if (chartSymbolItemProvider != null) chartSymbolItemProvider.dispose();
		if (chartAreaItemProvider != null) chartAreaItemProvider.dispose();
		if (chartWayItemProvider != null) chartWayItemProvider.dispose();
		if (navareaItemProvider != null) navareaItemProvider.dispose();
		if (depthItemProvider != null) depthItemProvider.dispose();
		if (gnssMeasuredPositionItemProvider != null) gnssMeasuredPositionItemProvider.dispose();
		if (anchorPositionItemProvider != null) anchorPositionItemProvider.dispose();
	}

}
