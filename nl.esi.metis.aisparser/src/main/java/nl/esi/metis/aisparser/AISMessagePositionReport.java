/* ESI AIS Parser
 * 
 * Copyright 2011/2012 by Pierre van de Laar & Pierre America (Embedded Systems Institute)
 * Copyright 2008 by Brian C. Lane <bcl@brianlane.com>
 * All Rights Reserved
 * 
 */
package nl.esi.metis.aisparser;

/** This is the common interface for all types of AIS messages that provide position reports. 
 * Mobile stations (i.e., ships and other vehicles) should periodically transmit such position reports.
 * @author Pierre van de Laar
 * @author Pierre America
 */
public interface AISMessagePositionReport extends AISMessage, PositionInfo {

	/** Returns the navigational status.
	 * This can be further analyzed using utility class {@link UtilsNavStatus}.
	 * @return an integer in the range of 0 to 15: <br>
	 * 0 = under way using engine <br>
	 * 1 = at anchor <br>
	 * 2 = not under command <br>
	 * 3 = restricted maneuverability <br>
	 * 4 = constrained by her draught <br>
	 * 5 = moored <br>
	 * 6 = aground <br>
	 * 7 = engaged in fishing <br>
	 * 8 = under way sailing <br>
	 * 9 = reserved for future amendment of navigational status for ships carrying DG, HS, or MP, or IMO hazard or pollutant category C, high speed craft (HSC) <br>
	 * 10 = reserved for future amendment of navigational status for ships carrying dangerous goods (DG), harmful substances (HS) or marine pollutants (MP), 
	 *      or IMO hazard or pollutant category A, wing in grand (WIG) <br>
	 * 11-13 = reserved for future use <br>
	 * 14 = AIS-SART (active) <br>
	 * 15 = not defined = default (also used by AIS-SART under test)
	 */
	public int getNavigationalStatus();

	/** Returns the rate of turn.
	 * This value can be analyzed further with utility class {@link UtilsRateOfTurn8}.
	 * @return an integer value in the range of -128 to 127: <br>
	 * 0 to +126 = turning right at up to 708&deg per minute or higher <br>
	 * 0 to -126 = turning left at up to 708&deg per minute or higher <br>
	 * Values between 0 and 708&deg per minute coded by ROT<sub>AIS</sub> = 4.733 SQRT(ROT<sub>sensor</sub>) degrees per minute,
	 * where ROT<sub>sensor</sub> is the Rate of Turn as input by an external Rate of Turn Indicator (TI). 
	 * ROT<sub>AIS</sub> is rounded to the nearest integer value. <br>
	 * +127 = turning right at more than 5&deg per 30 seconds (No TI available) <br>
	 * -127 = turning left at more than 5&deg per 30 seconds (No TI available) <br>
	 * -128 (80 hex) indicates no turn information available (default). <br>
	 */
	public int getRateOfTurn();

	/** Returns the speed over ground.
	 * @return an integer value in the range of 0 to 1023, 
	 * representing the speed over ground in 1/10 knot steps (0-102.2 knots) <br>
	 * 1023 = not available <br>
	 * 1022 = 102.2 knots or higher
	 */
	public int getSpeedOverGround();

	/** Returns the course over ground.
	 * This value can be analyzed further with utility class {@link UtilsAngle12}.
	 * @return an integer value representing the course over ground in 1/10&deg; for values in the range of 0 to 3599.<br>
	 * 3600 (E10h) = not available. <br>
	 * 3601 or higher should not be used
	 */
	public int getCourseOverGround();

	/** Returns the true heading.
	 * @return an integer value representing the true heading in degrees (0-359). <br>
	 * 511 indicates not available
	 */
	public int getTrueHeading();

	/** Returns the time stamp contained in the message.
	 * This can be analyzed further using utility class {@link UtilsTimeStamp}.
	 * @return an integer value representing the UTC second when the report was generated by the electronic position fixing system (EPFS) (0-59) <br>
	 * 60 if time stamp is not available <br>
	 * 61 if positioning system is in manual input mode <br>
	 * 62 if electronic position fixing system operates in estimated (dead reckoning) mode <br>
	 * 63 if the positioning system is inoperative
	 */
	public int getTimeStamp();

	/** Returns the special maneuver indicator.
	 * @return an integer value with the following meaning: <br>
	 * 0 = not available <br>
	 * 1 = not engaged in special maneuver <br>
	 * 2 = engaged in special maneuver (i.e.: regional passing arrangement on Inland Waterway)
	 */
	public int getSpecialManoeuvre();

	/** Returns the spare bits.
	 * @return the integer value of the spare bits, which should be zero.
	 */
	public int getSpare();

	/** Returns the RAIM flag, which describes the receiver autonomous integrity monitoring status of the electronic position fixing device.
	 * @return a boolean value: <br>
	 * false = RAIM not in use <br>
	 * true = RAIM in use
	 */
	public boolean getRaimFlag();

	/** Returns the communication state.
	 * @return the value of the communication state. Depending on the message type, this may be {@link Itdma} or {@link Sotdma}.
	 */
	public CommunicationState getCommunicationState();
}