/* ESI AIS Parser
 * 
 * Copyright 2011/2012 by Pierre van de Laar & Pierre America (Embedded Systems Institute)
 * Copyright 2008 by Brian C. Lane <bcl@brianlane.com>
 * All Rights Reserved
 * 
 */
package nl.esi.metis.aisparser;

/** This is the common interface for AIS message of type 18 or 19: Standard/Extended Class B equipment position report.
*
* @author Pierre van de Laar
* @author Pierre America
* @author Brian C. Lane
*/

public interface AISMessageClassBPositionReport extends AISMessage, PositionInfo{

	/** Returns the first set of spare bits.
	 * @return the value of the first set of spare bits. This should be zero.
	 */
	public int getSpare1();

	/** Returns the speed over ground.
	 * @return an integer value in the range of 0 to 1023, 
	 * representing the speed over ground in 1/10 knot steps (0-102.2 knots) <br>
	 * 1023 = not available <br>
	 * 1022 = 102.2 knots or higher
	 */
	public int getSpeedOverGround();

	/** Returns the course over ground. This value can be analyzed further with utility class {@link UtilsAngle12}.
	 * @return an integer value representing the course over ground in 1/10&deg; for values in the range of 0 to 3599.<br>
	 * 3600 (E10h) = not available. <br>
	 * 3601 or higher should not be used
	 */
	public int getCourseOverGround();

	/** Returns the true heading.
	 * @return an integer value representing the true heading in degrees (0-359). <br>
	 * 511 indicates not available
	 */
	public int getTrueHeading();

	/** Returns the time stamp contained in the message.
	 * This can be analyzed further using utility class {@link UtilsTimeStamp}.
	 * @return an integer value representing the UTC second when the report was generated by the electronic position fixing system (EPFS) (0-59) <br>
	 * 60 if time stamp is not available <br>
	 * 61 if positioning system is in manual input mode <br>
	 * 62 if electronic position fixing system operates in estimated (dead reckoning) mode <br>
	 * 63 if the positioning system is inoperative
	 */
	public int getTimeStamp();

	/** Returns the second set of spare bits.
	 * @return the value of the second set of spare bits. This should be zero.
	 */
	public int getSpare2();

	/** Returns the assigned mode flag.
	 * @return a boolean value representing the assigned mode flag: <br>
	 * false = Station operating in autonomous and continuous mode <br>
	 * true = Station operating in assigned mode
	 */
	public boolean getAssignedModeFlag();

	/** Returns the RAIM flag, which describes the receiver autonomous integrity monitoring status of the electronic position fixing device.
	 * @return a boolean value: <br>
	 * false = RAIM not in use <br>
	 * true = RAIM in use
	 */
	public boolean getRaimFlag();

}